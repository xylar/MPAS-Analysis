[runs]
## options related to the run to be analyzed and reference runs to be
## compared against

# mainRunName is a name that identifies the simulation being analyzed.
mainRunName = B-MGM

# config file for a control run to which this run will be compared.  The
# analysis should have already been run to completion once with this config
# file, so that the relevant MPAS climatologies already exist and have been
# remapped to the comparison grid.  Leave this option commented out if no
# control run is desired.
# controlRunConfigFile = /path/to/config/file

# config file for a main run on which the analysis was already run to
# completion.  The relevant MPAS climatologies already exist and have been
# remapped to the comparison grid and time series have been extracted.
# Leave this option commented out if the analysis for the main run should be
# performed.
# mainRunConfigFile = /path/to/config/file

[execute]
## options related to executing parallel tasks

# the number of parallel tasks (1 means tasks run in serial, the default)
parallelTaskCount = 12

# the parallelism mode in ncclimo ("serial" or "bck")
# Set this to "bck" (background parallelism) if running on a machine that can
# handle 12 simultaneous processes, one for each monthly climatology.
ncclimoParallelMode = bck

[diagnostics]
## config options related to observations, mapping files and region files used
## by MPAS-Analysis in diagnostics computations.

# The base path to the diagnostics directory.  Typically, this will be a shared
# directory on each E3SM supported machine (see the example config files for
# its location).  For other machines, this would be the directory pointed to
# when running "download_analysis_data.py" to get the public observations,
# mapping files and region files.
baseDirectory = /global/cfs/cdirs/e3sm/diagnostics

# A second directory where custom diagonstics data such as mapping files and
# regions masks for unsupported grids can be found.  The structure of
# subdirectories in this directory must be the same as baseDirectory
customDirectory = /global/cfs/cdirs/m3412/custom_diagnostics

[input]
## options related to reading in the results to be analyzed

# directory containing model results
baseDirectory = /global/cfs/cdirs/m3412/simulations/20200610.A_WCYCL1850-DIB-ISMF_CMIP6.ne30_ECwISC30to60E1r2.cori-knl.maint1p2-3DGM

# subdirectory containing restart files (Activate these sections only if using short-term archiving)
runSubdirectory = archive/rest/0002-01-01-00000
# subdirectory for ocean history files
oceanHistorySubdirectory = archive/ocn/hist
# subdirectory for sea ice history files
seaIceHistorySubdirectory = archive/ice/hist

# names of ocean and sea ice meshes (e.g. oEC60to30v3, oQU240v3, oRRS30to10v3, etc.)
mpasMeshName = ECwISC30to60E1r2

# names of namelist and streams files, either a path relative to baseDirectory
# or an absolute path.
oceanNamelistFileName = run/mpaso_in
oceanStreamsFileName = run/streams.ocean
seaIceNamelistFileName = run/mpassi_in
seaIceStreamsFileName = run/streams.seaice

[output]
## options related to writing out plots, intermediate cached data sets, logs,
## etc.

# directory where analysis should be written
baseDirectory = /global/cscratch1/sd/xylar/analysis/cryosphere_v1_figures/20200610.A_WCYCL1850-DIB-ISMF_CMIP6.ne30_ECwISC30to60E1r2.cori-knl.maint1p2-3DGM/yrs21-50

# provide an absolute path to put HTML in an alternative location (e.g. a web
# portal)
htmlSubdirectory = /global/cfs/cdirs/m3412/www/xylar/cryosphere_v1_figures/B-MGM/yrs21-50

# a list of analyses to generate.  Valid names can be seen by running:
#   ./run_mpas_analysis --list
# This command also lists tags for each analysis.
# Shortcuts exist to generate (or not generate) several types of analysis.
# These include:
#   'all' -- all analyses will be run
#   'all_<tag>' -- all analysis with a particular tag will be run
#   'all_<component>' -- all analyses from a given component (either 'ocean'
#                        or 'seaIce') will be run
#   'only_<component>', 'only_<tag>' -- all analysis from this component or
#                                       with this tag will be run, and all
#                                       analysis for other components or
#                                       without the tag will be skipped
#   'no_<task_name>' -- skip the given task
#   'no_<component>', 'no_<tag>' -- in analogy to 'all_*', skip all analysis
#                                   tasks from the given compoonent or with
#                                   the given tag.  Do
#                                      ./run_mpas_analysis --list
#                                   to list all task names and their tags
# an equivalent syntax can be used on the command line to override this
# option:
#    ./run_mpas_analysis config.analysis --generate \
#         all,no_ocean,all_timeSeries
# All tasks with tag "BGC", "icebergs", "index", and "eke" are disabled because this run
# did not include BGC or icebergs, the EKE analysis member was off and the El Nino analysis
# is not meaningful (SSTs are prescribed).
#generate = ['all', 'no_BGC', 'no_icebergs', 'no_index', 'no_eke', 'no_min',
#            'no_max', 'no_regionalTSDiagrams' ]
generate = ['climatologyMapAntarcticMelt', 'regionalTSDiagrams',
            'timeSeriesOceanRegions', 'timeSeriesAntarcticMelt',
            'climatologyMapWoa', 'climatologyMapSchmidtko']

[climatology]
## options related to producing climatologies, typically to compare against
## observations and previous runs

# the first year over which to average climatalogies
startYear = 21
# the last year over which to average climatalogies
endYear = 50

[timeSeries]
## options related to producing time series plots, often to compare against
## observations and previous runs

# start and end years for timeseries analysis. Using out-of-bounds values
#   like start_year = 1 and end_year = 9999 will be clipped to the valid range
#   of years, and is a good way of insuring that all values are used.
startYear = 21
endYear = 100

[index]
## options related to producing nino index.

# start and end years for the nino 3.4 analysis.  Using out-of-bounds values
#   like start_year = 1 and end_year = 9999 will be clipped to the valid range
#   of years, and is a good way of insuring that all values are used.
# For valid statistics, index times should include at least 30 years
startYear = 21
endYear = 100

[regionalTSDiagrams]
## options related to plotting T/S diagrams of ocean regions

# the names of region groups to plot, each with its own section below
regionGroups = ['Antarctic Regions']

[TSDiagramsForAntarcticRegions]
## options related to plotting T/S diagrams of Antarctic regions

# list of regions to plot or ['all'] for all regions in the masks file.
# See "regionNames" in the antarcticRegions masks file in
# regionMaskSubdirectory for details.
regionNames = ['Weddell Sea Shelf']

# The color map for depth or volume
# colormap = white_cmo_deep
colormap = cmo.deep

# if diagramType == 'volumetric', the bin boundaries for T and S
# if diagramType == 'scatter', only the min and max are important (and the
#   bins are only used for computing neutral density contours)
Tbins = numpy.linspace(-2.5, 4, 131)
Sbins = numpy.linspace(33.8, 34.8, 201)

[timeSeriesAntarcticRegions]
## options related to plotting time series of Antarctic regions

# list of regions to plot or ['all'] for all regions in the masks file.
# See "regionNames" in the antarcticRegions masks file in
# regionMaskSubdirectory for details.
regionNames = ['Weddell Sea Shelf']

# a list of variables to plot
variables = [{'name': 'temperature',
              'title': 'Temperature',
              'units': r'$^\circ$C',
              'mpas': 'timeMonthly_avg_activeTracers_temperature'},
             {'name': 'salinity',
              'title': 'Salinity',
              'units': 'PSU',
              'mpas': 'timeMonthly_avg_activeTracers_salinity'}]

# Obserational data sets to compare against
obs = ['SOSE', 'WOA18']

[climatologyMapAntarcticMelt]
## options related to plotting horizontally regridded maps of Antarctic
## sub-ice-shelf melt rates against control model results and observations

# A dictionary with keywords for the norm
normArgsResult = {'linthresh': 1., 'linscale': 0.5, 'vmin': -20.,
                  'vmax': 20.}
colorbarTicksResult = [-20., -10., -5., -2., -1., 0., 1., 2., 5., 10., 20.]

